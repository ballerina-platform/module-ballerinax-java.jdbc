/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv('packageUser')
                password System.getenv('packagePAT')
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - Java.Jdbc Ballerina Generator'

def packageName = 'java.jdbc'
def packageOrg = 'ballerinax'
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")

def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/Ballerina.toml")
def compilerPluginTomlFilePlaceHolder = new File("${project.rootDir}/build-config/resources/CompilerPlugin.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def compilerPluginTomlFile = new File("$project.projectDir/CompilerPlugin.toml")

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", '')
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
    testCoverageParam = '--code-coverage --coverage-format=xml --includes=io.ballerina.stdlib.java.jdbc.*:ballerinax.*'
}

// TODO: Remove this task after this improvement(https://github.com/ballerina-platform/ballerina-lang/issues/38826)
task removeTrasactionTestsForNativeTest {
    if (project.hasProperty('balNativeTest')) {
        delete "${project.projectDir}/tests/local-transaction-test.bal"
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentSQLVersion = stripBallerinaExtensionVersion(project.stdlibSqlVersion)

        def newConfig = ballerinaTomlFilePlaceHolder.text.replace('@project.version@', project.version.toString())
        newConfig = newConfig.replace('@toml.version@', tomlVersion)
        newConfig = newConfig.replace('@sql.version@', stdlibDependentSQLVersion)
        newConfig = newConfig.replace('@sql.native.version@', project.stdlibSqlVersion)
        newConfig = newConfig.replace('@h2.connector.version@', project.h2DriverVersion)
        ballerinaTomlFile.text = newConfig

        def newCompilerPluginToml = compilerPluginTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        compilerPluginTomlFile.text = newCompilerPluginToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml CompilerPlugin.toml"
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-${packageOrg}-${packageName}")
            credentials {
                username = System.getenv('publishUser')
                password = System.getenv('publishPAT')
            }
        }
    }
}

class Database {

    String db
    String category
    String script

    Database(String db, String category, String script) {
        this.db = db
        this.category = category
        this.script = script
    }

    String getDb() {
        return this.db
    }

    String getCategory() {
        return this.category
    }

    String getScript() {
        return this.script
    }

}

class DatabaseMeta {

    String group
    String mainGroup
    List<Database> databases

    DatabaseMeta(String group, String mainGroup, List<Database> databases) {
        this.group = group
        this.mainGroup = mainGroup
        this.databases = databases
    }

    String getGroup() {
        return this.group
    }

    String getMainGroup() {
        return this.mainGroup
    }

    List<Database> getDatabases() {
        return this.databases
    }

}

List<DatabaseMeta> testDatabasesList = new ArrayList<DatabaseMeta>()

List<Database> connectionDbs = new ArrayList<Database>()
connectionDbs.add(new Database('CONNECT_DB', 'connection', 'connector-init-test-data.sql'))
testDatabasesList.add(new DatabaseMeta('connection', 'connection', connectionDbs))

List<Database> poolDbs = new ArrayList<Database>()
poolDbs.add(new Database('POOL_DB_1', 'pool', 'connection-pool-test-data.sql'))
poolDbs.add(new Database('POOL_DB_2', 'pool', 'connection-pool-test-data.sql'))
testDatabasesList.add(new DatabaseMeta('pool', 'pool', poolDbs))

List<Database> transactionDbs = new ArrayList<Database>()
Database xa1Tran = new Database('XA_TRANSACTION_1', 'transaction', 'xa-transaction-test-data-1.sql')
Database xa2Tran = new Database('XA_TRANSACTION_2', 'transaction', 'xa-transaction-test-data-2.sql')
Database localTran = new Database('LOCAL_TRANSACTION', 'transaction', 'local-transaction-test-data.sql')
transactionDbs.add(xa1Tran)
transactionDbs.add(xa2Tran)
transactionDbs.add(localTran)
testDatabasesList.add(new DatabaseMeta('transaction', 'transaction', transactionDbs))
List<Database> xaTransactionDbs = new ArrayList<Database>()
xaTransactionDbs.add(xa1Tran)
xaTransactionDbs.add(xa2Tran)
testDatabasesList.add(new DatabaseMeta('xa-transaction', 'transaction', xaTransactionDbs))
List<Database> localTransactionDbs = new ArrayList<Database>()
localTransactionDbs.add(localTran)
testDatabasesList.add(new DatabaseMeta('local-transaction', 'transaction', localTransactionDbs))

List<Database> executeDbs = new ArrayList<Database>()
Database exeBasic = new Database('EXECUTE_DB', 'execute', 'execute-test-data.sql')
Database exeParam = new Database('EXECUTE_PARAMS_DB', 'execute', 'execute-params-test-data.sql')
executeDbs.add(exeBasic)
executeDbs.add(exeParam)
testDatabasesList.add(new DatabaseMeta('execute', 'execute', executeDbs))
List<Database> exeBasicDbs = new ArrayList<Database>()
exeBasicDbs.add(exeBasic)
testDatabasesList.add(new DatabaseMeta('execute-basic', 'execute', exeBasicDbs))
List<Database> exeParamDbs = new ArrayList<Database>()
exeParamDbs.add(exeParam)
testDatabasesList.add(new DatabaseMeta('execute-params', 'execute', exeParamDbs))

List<Database> batchExeDbs = new ArrayList<Database>()
batchExeDbs.add(new Database('BATCH_EXECUTE_DB', 'batchexecute', 'batch-execute-test-data.sql'))
testDatabasesList.add(new DatabaseMeta('batch-execute', 'batch-execute', batchExeDbs))

List<Database> errorDbs = new ArrayList<Database>()
errorDbs.add(new Database('ERROR_DB', 'error', 'error-test-data.sql'))
testDatabasesList.add(new DatabaseMeta('error', 'error', errorDbs))

List<Database> queryDbs = new ArrayList<Database>()
Database querySimple = new Database('QUERY_SIMPLE_PARAMS_DB', 'query', 'simple-params-test-data.sql')
Database queryNumeric = new Database('QUERY_NUMERIC_PARAMS_DB', 'query', 'numerical-test-data.sql')
Database queryComplex = new Database('QUERY_COMPLEX_PARAMS_DB', 'query', 'complex-test-data.sql')
queryDbs.add(querySimple)
queryDbs.add(queryNumeric)
queryDbs.add(queryComplex)
testDatabasesList.add(new DatabaseMeta('query', 'query', queryDbs))
List<Database> querySimDbs = new ArrayList<Database>()
querySimDbs.add(querySimple)
testDatabasesList.add(new DatabaseMeta('query-simple-params', 'query', querySimDbs))
List<Database> queryNumDbs = new ArrayList<Database>()
queryNumDbs.add(queryNumeric)
testDatabasesList.add(new DatabaseMeta('query-numeric-params', 'query', queryNumDbs))
List<Database> queryComDbs = new ArrayList<Database>()
queryComDbs.add(queryComplex)
testDatabasesList.add(new DatabaseMeta('query-complex-params', 'query', queryComDbs))

task createTestDatabases {
    List<DatabaseMeta> dbsNeeded = new ArrayList<DatabaseMeta>()
    def MainGroupList = ['connection', 'pool', 'transaction', 'execute', 'batch-execute', 'query', 'error']
    String[] tempGroups
    if (project.hasProperty('groups')) {
        tempGroups = project.findProperty('groups').toString().split(',')
    } else {
        tempGroups = MainGroupList
    }
    def count = 0
    def dbCount
    while (count < tempGroups.length) {
        dbCount = 0
        while (dbCount < testDatabasesList.size()) {
            DatabaseMeta val = testDatabasesList[dbCount]
            if (val.getGroup().equalsIgnoreCase(tempGroups[count])
                    && (val.getGroup().equalsIgnoreCase(val.getMainGroup()) ||
                    !tempGroups.contains(val.getMainGroup()))) {
                dbsNeeded.add(val)
            }
            dbCount = dbCount + 1
        }
        count = count + 1
    }
    doLast {
        println('Databases will be created for :' + tempGroups + ' groups')
        count = 0
        while (count < dbsNeeded.size()) {
            DatabaseMeta dbMeta = dbsNeeded[count]
            List<Database> dbList = dbMeta.getDatabases()
            dbCount = 0
            while (dbCount < dbList.size()) {
                Database db = dbList[dbCount]
                try {
                    exec {
                        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                            commandLine 'cmd', '/c', "java -classpath $project.projectDir\\lib\\h2-${h2DriverVersion}.jar " +
                                    "org.h2.tools.RunScript -url jdbc:h2:$project.projectDir\\target\\databases\\${db.getDb()}" +
                                    ' -user test -password Test123 -script ' +
                                    "$project.projectDir\\tests\\resources\\sql\\${db.getCategory()}\\${db.getScript()}"
                        } else {
                            commandLine 'sh', '-c', "java -cp $project.projectDir/lib/h2-${h2DriverVersion}.jar " +
                                    "org.h2.tools.RunScript -url jdbc:h2:$project.projectDir/target/databases/${db.getDb()}" +
                                    ' -user test -password Test123 -script ' +
                                    "$project.projectDir/tests/resources/sql/${db.getCategory()}/${db.getScript()}"
                        }
                    }
                    sleep(5 * 1000)
                } catch (all) {
                    println(all.cause)
                    throw new GradleException('could not create test databases')
                }
                dbCount = dbCount + 1
            }
            count = count + 1
        }
    }
}

task removeTestDatabases() {
    doLast {
        try {
            exec {
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "rmdir $project.projectDir\\target\\databases /s /q"
                } else {
                    commandLine 'sh', '-c', "rm -r $project.projectDir/target/databases"
                }
            }
        } catch (all) {
            println('Gradle process can safely ignore the removeTestDatabases task')
        }
    }
}


updateTomlFiles.dependsOn copyStdlibs
createTestDatabases.dependsOn updateTomlFiles

build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"

build.dependsOn ":${packageName}-native-image-configs:build"
test.dependsOn ":${packageName}-native-image-configs:build"

build.dependsOn ":${packageName}-compiler-plugin:build"
test.dependsOn ":${packageName}-compiler-plugin:build"

build.finalizedBy removeTestDatabases
test.dependsOn createTestDatabases
test.dependsOn removeTrasactionTestsForNativeTest
